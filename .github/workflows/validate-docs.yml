name: Validate docs

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize] # This will trigger the workflow only when a PR is opened or updated with new commits

jobs:
  check-smart-quotes:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v5

      - name: Check for smart quotes in FSH files
        run: |
          echo "üîç Scanning FSH files for smart quotes..."
          
          # Search for smart quotes (U+201C, U+201D, U+2018, U+2019) in FSH files
          SMART_QUOTES_FOUND=$(find . -name "*.fsh" -type f -exec grep -l $'[\u201C\u201D\u2018\u2019]' {} \; 2>/dev/null | wc -l)
          
          if [ "$SMART_QUOTES_FOUND" -gt 0 ]; then
            echo "‚ùå Smart quotes detected in FSH files!"
            echo "Files containing smart quotes:"
            find . -name "*.fsh" -type f -exec grep -l $'[\u201C\u201D\u2018\u2019]' {} \; 2>/dev/null
            echo ""
            echo "Please replace smart quotes with regular ASCII quotes:"
            echo "‚Äú" ‚Üí \"  (U+201C ‚Üí ASCII double quote)"
            echo "‚Äù" ‚Üí \"  (U+201D ‚Üí ASCII double quote)"
            echo "‚Äò' ‚Üí '  (U+2018 ‚Üí ASCII single quote)"
            echo "‚Äô' ‚Üí '  (U+2019 ‚Üí ASCII single quote)"
            exit 1
          else
            echo "‚úÖ No smart quotes found in FSH files!"
          fi

  sushi:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Install Sushi
        run: sudo npm install -g fsh-sushi

      - name: Validate with Sushi
        run: sushi .

  ig-publisher:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Install Jekyll
        run: sudo gem install jekyll

      - name: Install Sushi
        run: sudo npm install -g fsh-sushi

      - name: Install IG publisher
        run: |
          chmod +x ./_updatePublisher.sh
          ./_updatePublisher.sh -y

      - name: Check that the IG builds successfully
        run: |
          chmod +x ./_genonce.sh
          ./_genonce.sh
          echo "‚úÖ IG built successfully"

      - name: Check QA report
        run: |
          # Configuration
          MAX_ALLOWED_ERRORS=0
          MAX_ALLOWED_WARNINGS=0
          
          if [ ! -f "output/qa.json" ]; then
            echo "‚ùå QA file not found: output/qa.json"
            exit 1
          fi
          
          # Extract errors and warnings from qa.json
          ERRORS=$(jq -r '.errs // 0' output/qa.json)
          WARNINGS=$(jq -r '.warnings // 0' output/qa.json)
          
          echo "  QA Results:"
          echo "   Errors: $ERRORS"
          echo "   Warnings: $WARNINGS"
          
          # Check if errors exceed threshold
          if [ "$ERRORS" -gt $MAX_ALLOWED_ERRORS ]; then
            echo "‚ùå Too many errors: $ERRORS (maximum allowed: $MAX_ALLOWED_ERRORS known errors)"
            exit 1
          fi
          
          # Check if there are any warnings
          if [ "$WARNINGS" -gt $MAX_ALLOWED_WARNINGS ]; then
            echo "‚ùå Warnings found: $WARNINGS (maximum allowed: $MAX_ALLOWED_WARNINGS)"
            exit 1
          fi
          
          echo "‚úÖ QA check passed: $ERRORS errors (‚â§$MAX_ALLOWED_ERRORS) and $WARNINGS warnings (‚â§$MAX_ALLOWED_WARNINGS)"

      - name: Upload output folder
        if: always() && hashFiles('output/**/*') != ''
        uses: actions/upload-artifact@v4
        with:
          name: ig-output-${{ github.run_number }}
          path: output/
          retention-days: 30
          if-no-files-found: warn
